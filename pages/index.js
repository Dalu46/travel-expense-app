import Head from "next/head";
import Image from "next/image";
import { Inter } from "next/font/google";
import styles from "@/styles/Home.module.css";
import "@appwrite.io/pink";
import "@appwrite.io/pink-icons";
import { Client, Databases, ID } from "appwrite";
import { useEffect, useState } from "react";
import LocationList from "@/components/LocationList";

const inter = Inter({ subsets: ["latin"] });

export default function Home({ locations }) {
  const [location, setLocation] = useState("");
  const [cost, setCost] = useState(1);
  const [totalCost, setTotalCost] = useState(0);

  const [locationsToRender, setlocationsToRender] = useState(locations.documents);
  // console.log(locationsToRender)

  const [totalCostUpdated, setTotalCostUpdated] = useState(false);

  useEffect(() => {
    const subscription = async () => {
      const client = new Client();
      client
        .setEndpoint(process.env.NEXT_PUBLIC_ENDPOINT)
        .setProject(process.env.NEXT_PUBLIC_PROJECT);

      // Subscribe to documents channel
      client.subscribe(
        `databases.${process.env.NEXT_PUBLIC_DATABASE}.collections.${process.env.NEXT_PUBLIC_COLLECTION_LOCATION}.documents`,
        (response) => {
          try {
            if (response.events[0].includes("create")) {
              setlocationsToRender([...locationsToRender, response.payload]);
            } else {
              const update = locationsToRender.filter((item) => {
                return item.$id !== response.payload.$id;
              });
              console.log(update);
              setlocationsToRender(update);
            }
          } catch (error) {
            console.log(error);
          }
        }
      );
    };

    const updateTotalCost = () => {
      const total = locationsToRender
        .map((location) => location.cost.amount)
        .reduce((acc, car) => acc + car, 0);
      setTotalCost(total);
    };

    subscription();
    updateTotalCost();
  }, [totalCostUpdated, locationsToRender]);

  const handleLocationName = (e) => {
    setLocation(e.target.value);
  };

  const handgleCostChange = (e) => {
    setCost(e.target.value);
  };

  const addLocation = async (e) => {
    e.preventDefault();
    const client = new Client();
    const database = new Databases(client);

    client
      .setEndpoint(process.env.NEXT_PUBLIC_ENDPOINT)
      .setProject(process.env.NEXT_PUBLIC_PROJECT);

    const response = database.createDocument(
      process.env.NEXT_PUBLIC_DATABASE,
      process.env.NEXT_PUBLIC_COLLECTION_LOCATION,
      ID.unique(),
      {
        name: location,
        cost: { amount: cost },
      }
    );

    response.then(function (res) {
      setTotalCostUpdated(!totalCostUpdated);
      // window.location.reload();
      //set cost to zero and location to empty
      setCost(0);
      setLocation("");
    }),
      function (error) {
        console.log(error);
      };
  };

  const deleteLocation = async (location) => {
    const client = new Client();
    const database = new Databases(client);

    client
      .setEndpoint(process.env.NEXT_PUBLIC_ENDPOINT)
      .setProject(process.env.NEXT_PUBLIC_PROJECT);

    const response = database.deleteDocument(
      process.env.NEXT_PUBLIC_DATABASE,
      process.env.NEXT_PUBLIC_COLLECTION_LOCATION,
      location.$id
    );
    response.then(function (res) {
      console.log(res);
      setTotalCostUpdated(!totalCostUpdated);
    }),
      function (error) {
        console.log(error);
      };
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main
        className={`${styles.main} ${inter.className}`}
        style={{ background: "white" }}
      >
        <div className="u-width-full-line">
          <div className="" style={{ boxShadow: "hsl(var(--shadow-large))" }}>
            <h3 className="is-center heading-level-3 ">
              Travel Expense Management App
            </h3>
            <form onSubmit={addLocation} className="u-flex u-column-gap-24">
              <input
                onChange={handleLocationName}
                value={location}
                placeholder="Location"
                className="u-max-width-250 u-min-height-100-percent u-max-width-250"
                type="text"
                required
              />

              <input
                onChange={handgleCostChange}
                value={cost}
                className="u-remove-input-number-buttons u-min-height-100-percent u-max-width-250"
                type="number"
                required
              />

              <button onClick={addLocation} className="button">
                Submit
              </button>
            </form>
          </div>

          <LocationList locations={locationsToRender} deleteLocation={deleteLocation} />
          <h3 className="heading-level-3">Total Cost: ${totalCost}</h3>
        </div>
      </main>
    </>
  );
}

export async function getServerSideProps(context) {
  const client = new Client();

  client
    .setEndpoint(process.env.NEXT_PUBLIC_ENDPOINT)
    .setProject(process.env.NEXT_PUBLIC_PROJECT);

  const database = new Databases(client);

  const locations = await database.listDocuments(
    process.env.NEXT_PUBLIC_DATABASE,
    process.env.NEXT_PUBLIC_COLLECTION_LOCATION
  );

  return {
    props: { locations },
  };
}
